package CIF::Archive::MalwarePluginBase;
use base 'CIF::Archive::Plugin';

use strict;
use warnings;

__PACKAGE__->table('malware');
__PACKAGE__->columns(Primary => 'id');
__PACKAGE__->columns(All => qw/id uuid guid hash confidence reporttime created/);
__PACKAGE__->sequence('malware_id_seq');

use constant DATATYPE => 'malware';
sub datatype { return DATATYPE; }
sub feedtype { return DATATYPE; }

sub query { } # handled by the address module

sub match_event {
    my $class = shift;
    my $event = shift;
    my $ret = $class->SUPER::match_event($event);
    if ($ret == 0) {
      return 0;
    }
    if (defined($event->address)) {
      return 0;
    }
    my $hash = $event->{$class->hash_field()};
    unless (defined($hash)) {
      return 0;
    }
    if (lc($hash) !~ $class->hash_regex()) {
      return 0;
    }
    return 1;
}

sub insert_into_feed {
  my $class = shift;
  my $event = shift;
  my $hash = $event->{$class->hash_field()};
  $class->index_event_for_feed($event, $hash);
}

sub insert {
    my $class = shift;
    my $data = shift;
    my $event = $data->{event};
    
    my @ids;

    my $hash = $event->{$class->hash_field()};
    my $id = $class->insert_hash({ 
        uuid        => $event->uuid, 
        guid        => $event->guid, 
        confidence  => $event->confidence,
        reporttime  => $event->reporttime,
      },$hash);
    ## TODO: mem leak?
    push(@ids,@$id);
    return(undef,\@ids);
}

sub hash_regex {
  my $class = shift;
  die("$class->hash_regex needs to be defined.");
}

sub hash_field {
  my $class = shift;
  die("$class->hash_field needs to be defined.");
}

1;
